"use strict";(globalThis.webpackChunk_lyrasearch_docs=globalThis.webpackChunk_lyrasearch_docs||[]).push([[9311],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),h=a,d=p["".concat(s,".").concat(h)]||p[h]||m[h]||o;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},2947:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={},i="BM25 Algorithm",c={unversionedId:"usage/search/bm25",id:"usage/search/bm25",title:"BM25 Algorithm",description:"Lyra uses the BM25 algorithm to",source:"@site/docs/03-usage/search/05-bm25.md",sourceDirName:"03-usage/search",slug:"/usage/search/bm25",permalink:"/usage/search/bm25",draft:!1,editUrl:"https://github.com/lyrasearch/docs/tree/main/docs/03-usage/search/05-bm25.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"main",previous:{title:"Filters",permalink:"/usage/search/filters"},next:{title:"Plugins",permalink:"/plugins/"}},s={},l=[],u={toc:l};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bm25-algorithm"},"BM25 Algorithm"),(0,a.kt)("p",null,"Lyra uses the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Okapi_BM25"},"BM25")," algorithm to\ncalculate the relevance of a document when searching."),(0,a.kt)("p",null,"The BM25 algorithm is a ranking function used in search engines to score and rank documents that are relevant to a given query. It is an improvement over the older TF-IDF algorithm, which also assigns weights to terms based on their frequency, but does not take into account the length of the document or the average length of documents in the corpus. BM25 uses a similar approach, but also incorporates the inverse document frequency of each term, as well as a set of adjustable parameters that can be tuned to improve performance. The result is a more accurate ranking of documents that are relevant to a given query."),(0,a.kt)("p",null,"BM25 has become a popular algorithm for search engine ranking due to its flexibility and effectiveness. It can be adapted to different types of search tasks, from ad-hoc search to recommendation systems, and can be tuned to perform well on specific domains or languages. Additionally, it is computationally efficient and easy to implement, which makes it a practical choice for large-scale search systems."),(0,a.kt)("p",null,"You can edit the BM25 parameters by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"relevance")," property in the ",(0,a.kt)("inlineCode",{parentName:"p"},"search"),"\nconfiguration object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = await search(movieDB, {\n  term: "Chris",\n  properties: ["director"],\n  relevance: {\n    // Term frequency saturation parameter.\n    // Default value: 1.2\n    // Recommended value: between 1.2 and 2\n    k: 1.2,\n\n    // Length normalization parameter.\n    // Default value: 0.75\n    // Recommended value: > 0.75\n    b: 0.75,\n\n    // Frequency normalization lower bound.\n    // Default value: 0.5\n    // Recommended value: between 0.5 and 1\n    d: 0.5,  \n  },\n});\n')),(0,a.kt)("p",null,"You can learn more about the BM25 algorithm in the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Okapi_BM25"},"Okapi BM25\nWikipedia")," page."))}p.isMDXComponent=!0}}]);